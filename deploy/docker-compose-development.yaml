version: '3.3'

services:
  chat:
    build:
      context: ../chat
    image: chat:local-prod
    volumes:
      - type: bind
        source: ../chat/app
        target: /opt/chat/app
        read_only: true
      - ../chat/secrets.yaml:/opt/chat/secrets.yaml
    ports:
        - "5000"
    depends_on:
      - cockroachdb
    restart: "unless-stopped"

  scrape:
    build:
      context: ../scrape
    image: scrape:local-prod
    volumes:
      - ../scrape/settings.yaml:/opt/scrape/settings.yaml
      - type: bind
        source: ../scrape/app
        target: /opt/scrape/app
        read_only: true
    depends_on:
      - cockroachdb

  derive:
    build:
      context: ../derive
    image: chat:local-prod
    environment:
      - APP_MODE=${APP_MODE-development}
    ports:
      - "5000"
    depends_on:
      - cockroachdb

  archive:
    build:
        context: ../archive
    environment:
        - APP_MODE=${APP_MODE-development}
    depends_on:
        - cockroachdb
        # - localstack

  learn: #####
    build:
      context: ../learn
    environment:
      - APP_MODE=${APP_MODE-development}
    volumes:
      # TODO don't mount source code in production
      - ../learn/app:/app
    ports:
      - "5000"
    depends_on:
      - cockroachdb
    #   - localstack


############ Infra services ###############


  dev-assistant:
    image: project-n-dev-assistant
    build:
      context: dev-assistant/docker
    volumes:
      - ../:/workspace
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "4444:22"
    restart: unless-stopped
    privileged: true

#   localstack:
#     hostname: localstack
#     image: localstack/localstack:0.11.4
#     # ports:
#     #   - "4566-4599"
#     #   - "8080"
#     environment:
#       - SERVICES=${SERVICES-s3,dynamodb}
#       - DATA_DIR=${DATA_DIR-/var/lib/localstack}
#       - PORT_WEB_UI=${PORT_WEB_UI-8080}
#     volumes:
#       - localstack-data:/var/lib/localstack
#     healthcheck:
#       test: ["CMD", "bash", "-c", "awslocal s3 ls"]
#       interval: 30s
#       timeout: 5s
#       retries: 3
#     restart: unless-stopped

  cockroachdb:
    hostname: cockroachdb
    image: cockroachdb/cockroach:v20.1.4
    # ports:
    #   - "26257"
    #   - "8080"
    # TODO: move to certificate based secure database
    # See: https://www.cockroachlabs.com/docs/v20.1/build-a-python-app-with-cockroachdb-sqlalchemy#step-2-create-the-maxroach-user-and-bank-database
    command: ["start-single-node", "--insecure"]
    volumes:
      - cockroachdb-data:/cockroach/cockroach-data

#   postgres:
#     hostname: postgres
#     image: postgres:12.4
#     # ports:
#     #   - "5432"
#     environment:
#       # allow password-free connections
#       - POSTGRES_HOST_AUTH_METHOD=trust
#       - POSTGRES_USERNAME=${POSTGREST_USERNAME-postgesql}
#       - POSTGRES_PASSWORD=${POSTGRES_PASSWORD-mysecret}
#       - PGDATA=/var/lib/postgresql/data
#     volumes:
#       - postgres-data:/var/lib/postgresql/data
#     healthcheck:
#       test: ["CMD", "pg_isready", "-U", "postgres"]
#       interval: 30s
#       timeout: 5s
#       retries: 3
#     restart: unless-stopped

#   redis:
#     hostname: redis
#     image: redis:6.0
#     # use data persistance mode
#     command: "redis-server --appendonly yes"
#     # ports:
#     #   - "6379"
#     volumes:
#       - "./data/redis:/data"
#     healthcheck:
#       test: ["CMD", "redis-cli", "ping"]
#       interval: 30s
#       timeout: 5s
#       retries: 3
#     restart: unless-stopped

#   zookeeper:
#     hostname: zookeeper
#     image: zookeeper:3.4.9
#     # ports:
#     #   - "2181"
#     environment:
#         ZOO_MY_ID: 1
#         ZOO_PORT: 2181
#         ZOO_SERVERS: server.1=zookeeper:2888:3888
#     volumes:
#       - zookeeper-data:/data
#       - zookeeper-data:/datalog
#     healthcheck:
#       test: ["CMD", "zkServer.sh", "status"]
#       interval: 10s
#       timeout: 10s
#       retries: 3
#     restart: unless-stopped

#   kafka:
#     hostname: kafka
#     image: confluentinc/cp-kafka:5.5.1
#     # ports:
#     #   - "9092"
#     environment:
#       KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka:19092,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092
#       KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
#       KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
#       KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
#       KAFKA_BROKER_ID: 1
#       KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
#       KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
#     volumes:
#       - kafka-data:/var/lib/kafka/data
#     depends_on:
#       - zookeeper
#     healthcheck:
#       test: ["CMD", "kafka-topics", "--describe", "--bootstrap-server", "kafka:9092"]
#       interval: 15s
#       timeout: 10s
#       retries: 3
#     restart: unless-stopped

volumes:
  cockroachdb-data: {}
#   localstack-data: {}
#   postgres-data: {}
#   redis-data: {}
#   zookeeper-data: {}
#   kafka-data: {}
